this.ckan.module('table-selectable-rows',function($,_){return{select_all:null,total_checkboxes:0,buttons:null,initialize:function(){$.proxyAll(this,/_on/);this.total_checkboxes=$('input[type="checkbox"]',this.el).length;this.select_all=$('<input type="checkbox">').data('select-all',true).appendTo($('thead th:first-child',this.el));this.el.on('change','input[type="checkbox"]',this._onHandleCheckboxToggle);this.buttons=$('th.actions .btn',this.el).addClass('disabled').prop('disabled',true);},_onHandleCheckboxToggle:function($e){var checkbox=$($e.target);if(checkbox.data('select-all')){this.handleSelectAll(checkbox,checkbox.is(':checked'));}else{this.handleSelectOne(checkbox,checkbox.is(':checked'));}},handleSelectAll:function($target,$checked){$('input[type="checkbox"]',this.el).prop('checked',$checked);if($checked){$('tbody tr',this.el).addClass('table-selected');this.buttons.removeClass('disabled').prop('disabled',false);}else{$('tbody tr',this.el).removeClass('table-selected');this.buttons.addClass('disabled').prop('disabled',true);}},handleSelectOne:function($target,$checked){if($checked){$target.parents('tr').addClass('table-selected');}else{$target.parents('tr').removeClass('table-selected');}
var checked=$('tbody input[type="checkbox"]:checked',this.el).length;if(checked>=this.total_checkboxes){this.select_all.prop('checked',true);}else{this.select_all.prop('checked',false);}
if(checked>0){this.buttons.removeClass('disabled').prop('disabled',false);}else{this.buttons.addClass('disabled').prop('disabled',true);}}};});